:silent
val dir="../data/netflix/"

//val a0=loadSMat(dir+"train.smat.lz4")
//val ta0=loadSMat(dir+"test.smat.lz4")
val a0=loadSMat(dir+"newtrain.smat.lz4")
val ta0=loadSMat(dir+"newtest.smat.lz4")

val rebuild = false

val (a, ta) = if (rebuild) {
val (ii, jj, vv) = find3(a0+ta0);
val ir = rand(ii.length, 1) < 0.1f;
val itrain = find(ir == 0);
val itest = find(ir);
val a = sparse(ii(itrain),jj(itrain),vv(itrain),a0.nrows,a0.ncols);
val ta = sparse(ii(itest),jj(itest),vv(itest),a0.nrows,a0.ncols);
saveSMat(dir+"newtrain.smat.lz4", a)
saveSMat(dir+"newtest.smat.lz4", ta)
(a, ta)
} else {
(a0, ta0)
}

val d = 512

val fact = zeros(d, a.ncols);
val (nn,opts) = SFA.learner(a,fact,d)

// good values for movielens 10m
opts.lambdam = 5f
opts.lambdau = 5f
opts.uiter = 8
opts.npasses = 5
opts.batchSize = 2000
opts.forceOnes = true

// good values for netflix
opts.lambdam = 5f
opts.lambdau = 5f
opts.uiter = 8
opts.npasses = 5
opts.batchSize = 1000
opts.forceOnes = true
opts.lrate = 0.03
opts.uconvg = 1e-3f
//opts.weightByUser = true
//opts.traceConverge = true


nn.train
val model = nn.model.asInstanceOf[SFA]
val mm = FMat(nn.modelmat)
val avg = model.avgrating
val tanz = ta > 0;
val preds = DDS(mm, fact, tanz)
preds.contents ~ preds.contents + avg
min(preds.contents, 5f, preds.contents)
max(preds.contents, 1f, preds.contents)
val diff = DMat(preds.contents - ta.contents)
val mse = ((diff ^* diff) / diff.length).dv

println("mse = %f" format mse);
:silent